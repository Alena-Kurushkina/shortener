// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Users_CreateShortening_FullMethodName      = "/shortener.Users/CreateShortening"
	Users_GetFullString_FullMethodName         = "/shortener.Users/GetFullString"
	Users_CreateShorteningBatch_FullMethodName = "/shortener.Users/CreateShorteningBatch"
	Users_GetUserAllShortenings_FullMethodName = "/shortener.Users/GetUserAllShortenings"
	Users_DeleteRecord_FullMethodName          = "/shortener.Users/DeleteRecord"
	Users_GetStats_FullMethodName              = "/shortener.Users/GetStats"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	CreateShortening(ctx context.Context, in *CreateShorteningRequest, opts ...grpc.CallOption) (*ShorteningResponse, error)
	GetFullString(ctx context.Context, in *LongURLRequest, opts ...grpc.CallOption) (*ShorteningResponse, error)
	CreateShorteningBatch(ctx context.Context, in *CreateShorteningBatchRequest, opts ...grpc.CallOption) (*ShorteningBatchResponse, error)
	GetUserAllShortenings(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ShorteningBatchResponse, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Error, error)
	GetStats(ctx context.Context, in *None, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateShortening(ctx context.Context, in *CreateShorteningRequest, opts ...grpc.CallOption) (*ShorteningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShorteningResponse)
	err := c.cc.Invoke(ctx, Users_CreateShortening_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetFullString(ctx context.Context, in *LongURLRequest, opts ...grpc.CallOption) (*ShorteningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShorteningResponse)
	err := c.cc.Invoke(ctx, Users_GetFullString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateShorteningBatch(ctx context.Context, in *CreateShorteningBatchRequest, opts ...grpc.CallOption) (*ShorteningBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShorteningBatchResponse)
	err := c.cc.Invoke(ctx, Users_CreateShorteningBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUserAllShortenings(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ShorteningBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShorteningBatchResponse)
	err := c.cc.Invoke(ctx, Users_GetUserAllShortenings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, Users_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetStats(ctx context.Context, in *None, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, Users_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility.
type UsersServer interface {
	CreateShortening(context.Context, *CreateShorteningRequest) (*ShorteningResponse, error)
	GetFullString(context.Context, *LongURLRequest) (*ShorteningResponse, error)
	CreateShorteningBatch(context.Context, *CreateShorteningBatchRequest) (*ShorteningBatchResponse, error)
	GetUserAllShortenings(context.Context, *UserID) (*ShorteningBatchResponse, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*Error, error)
	GetStats(context.Context, *None) (*GetStatsResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServer struct{}

func (UnimplementedUsersServer) CreateShortening(context.Context, *CreateShorteningRequest) (*ShorteningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortening not implemented")
}
func (UnimplementedUsersServer) GetFullString(context.Context, *LongURLRequest) (*ShorteningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullString not implemented")
}
func (UnimplementedUsersServer) CreateShorteningBatch(context.Context, *CreateShorteningBatchRequest) (*ShorteningBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShorteningBatch not implemented")
}
func (UnimplementedUsersServer) GetUserAllShortenings(context.Context, *UserID) (*ShorteningBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAllShortenings not implemented")
}
func (UnimplementedUsersServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedUsersServer) GetStats(context.Context, *None) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}
func (UnimplementedUsersServer) testEmbeddedByValue()               {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	// If the following call pancis, it indicates UnimplementedUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_CreateShortening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShorteningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateShortening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateShortening_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateShortening(ctx, req.(*CreateShorteningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetFullString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetFullString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetFullString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetFullString(ctx, req.(*LongURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateShorteningBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShorteningBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateShorteningBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateShorteningBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateShorteningBatch(ctx, req.(*CreateShorteningBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUserAllShortenings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUserAllShortenings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetUserAllShortenings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUserAllShortenings(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetStats(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortening",
			Handler:    _Users_CreateShortening_Handler,
		},
		{
			MethodName: "GetFullString",
			Handler:    _Users_GetFullString_Handler,
		},
		{
			MethodName: "CreateShorteningBatch",
			Handler:    _Users_CreateShorteningBatch_Handler,
		},
		{
			MethodName: "GetUserAllShortenings",
			Handler:    _Users_GetUserAllShortenings_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _Users_DeleteRecord_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Users_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
